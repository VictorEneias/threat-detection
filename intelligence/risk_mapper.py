import socket

def verificar_smtp(ip):
    try:
        with socket.create_connection((ip, 25), timeout=5) as sock:
            banner = sock.recv(1024).decode(errors="ignore")
            if "220" in banner:
                return "‚ö†Ô∏è SMTP responde sem autentica√ß√£o inicial"
            return "autenticado"
    except Exception:
        return "falha"

def avaliar_riscos(portas_por_ip):
    alertas = []

    for ip, portas in portas_por_ip.items():
        for porta in portas:
            if porta == 21:
                alertas.append((ip, porta, "‚ö†Ô∏è FTP aberto ‚Äî arquivos da empresa podem estar expostos"))
            elif porta == 22:
                alertas.append((ip, porta, "‚ö†Ô∏è SSH acess√≠vel ‚Äî risco de acesso remoto via for√ßa bruta"))
            elif porta == 23:
                alertas.append((ip, porta, "üü• Telnet habilitado ‚Äî comunica√ß√£o sem criptografia"))
            elif porta == 80 and 443 not in portas:
                alertas.append((ip, porta, "‚ö†Ô∏è HTTP sem HTTPS ‚Äî dados podem ser interceptados"))
            elif porta == 3389:
                alertas.append((ip, porta, "üü• RDP exposto ‚Äî risco alto de invas√£o por desktop remoto"))
            elif porta == 445:
                alertas.append((ip, porta, "üü• SMB habilitado ‚Äî risco de ransomware ou vazamento de arquivos"))
            elif porta == 3306:
                alertas.append((ip, porta, "‚ö†Ô∏è Banco de dados MySQL acess√≠vel publicamente"))
            elif porta in [25, 465, 587]:
                msg = verificar_smtp(ip)
                if "autentica√ß√£o" in msg:
                    alertas.append((ip, porta, f"üìß SMTP aberto ‚Äî {msg}"))

    return alertas
